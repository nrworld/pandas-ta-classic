name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Python versions to test - update this when adding/removing supported versions
  PYTHON_VERSIONS: '["3.9", "3.10", "3.11", "3.12", "3.13"]'
  LATEST_PYTHON_VERSION: "3.13"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job 1: Basic structure validation (fast, runs first)
  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}
    
    - name: Validate package structure
      run: |
        python validate_structure.py

  # Job 2: Code quality checks (linting and formatting)
  code-quality:
    runs-on: ubuntu-latest
    needs: validate-structure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}
    
    - name: Install system dependencies for ta-lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git
        git clone https://github.com/ta-lib/ta-lib.git
        cd ta-lib
        if [ ! -f configure ]; then
          chmod +x autogen.sh
          ./autogen.sh
        fi
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig

    - name: Install dependencies and quality tools
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas
        pip install -r requirements.txt
        pip install TA-Lib
        pip install flake8 black
        pip install -e .
    
    - name: Run flake8 linting
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 pandas_ta_classic --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings for non-critical issues
        flake8 pandas_ta_classic --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=pandas_ta_classic/__init__.py
    
    - name: Check code formatting with black
      run: |
        black --check --diff pandas_ta_classic/

  # Job 3: Test matrix - Run tests on all 5 Python versions
  test-matrix:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(env.PYTHON_VERSIONS) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies for ta-lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git
        git clone https://github.com/ta-lib/ta-lib.git
        cd ta-lib
        if [ ! -f configure ]; then
          chmod +x autogen.sh
          ./autogen.sh
        fi
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas
        pip install -r requirements.txt
        pip install TA-Lib
        pip install -e .
    
    - name: Run comprehensive tests
      run: |
        python -m unittest discover tests/ -v
    
    - name: Test package installation and performance
      run: |
        python -c "import pandas_ta_classic as ta; print('Package imported successfully on Python ${{ matrix.python-version }}')"
        python -m unittest tests.test_indicator_performance -v

  # Job 4: Documentation - Build and deploy documentation (only on main branch)
  documentation:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}

    - name: Install system dependencies for ta-lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git
        git clone https://github.com/ta-lib/ta-lib.git
        cd ta-lib
        if [ ! -f configure ]; then
          chmod +x autogen.sh
          ./autogen.sh
        fi
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas
        pip install -r requirements.txt
        pip install TA-Lib
        pip install -e .
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Build with Jekyll
      uses: actions/jekyll-build-pages@v1
      with:
        source: ./
        destination: ./_site
      
    - name: Debug Jekyll build output
      run: |
        echo "Jekyll build completed. Checking _site directory:"
        ls -la ./_site/ || echo "No _site directory found"
        if [ -d "./_site" ]; then
          echo "Files in _site:"
          find ./_site -type f | head -10
        fi
        
    - name: Upload Jekyll artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site
    
    - name: Install Sphinx dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
          
    - name: Build Sphinx documentation
      run: |
        cd docs
        make html
          
    - name: Upload Sphinx artifact
      uses: actions/upload-artifact@v4
      with:
        name: sphinx-docs
        path: docs/_build/html

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Output deployment URL
      run: |
        echo "Deployment completed successfully"
        echo "Page URL: ${{ steps.deployment.outputs.page_url }}"
