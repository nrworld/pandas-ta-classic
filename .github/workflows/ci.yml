name: CI

"on":
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

env:
  # Latest stable Python version - update this when new Python versions are released
  LATEST_PYTHON_VERSION: "3.13"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job 1: Basic structure validation (fast, runs first)
  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}
    
    - name: Validate package structure
      run: |
        python validate_structure.py

  # Job 2: Generate Python version matrix dynamically
  generate-matrix:
    runs-on: ubuntu-latest
    needs: validate-structure
    outputs:
      python-versions: ${{ steps.versions.outputs.python-versions }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}
    
    - name: Generate Python version matrix
      id: versions
      run: |
        # Extract minor version from LATEST_PYTHON_VERSION (e.g., "3.13" -> "13")
        latest="${{ env.LATEST_PYTHON_VERSION }}"
        minor_version=$(echo "$latest" | cut -d'.' -f2)
        
        # Generate 5 versions: latest and 4 previous minor versions
        versions="["
        for i in {4..0}; do
          version_num=$((minor_version - i))
          if [ $i -eq 0 ]; then
            versions="${versions}\"3.${version_num}\""
          else
            versions="${versions}\"3.${version_num}\", "
          fi
        done
        versions="${versions}]"
        
        echo "python-versions=$versions" >> $GITHUB_OUTPUT
        echo "Generated Python versions: $versions"
    
    - name: Update setup.py with dynamic Python classifiers
      run: |
        python << 'EOF'
        # Simple approach: read setup.py, find Python classifier lines, and replace them
        latest_version = "${{ env.LATEST_PYTHON_VERSION }}"
        minor_version = int(latest_version.split('.')[1])
        
        # Generate the 5 versions we want
        target_versions = []
        for i in range(4, -1, -1):  # 4, 3, 2, 1, 0
            version_num = minor_version - i
            target_versions.append(f"3.{version_num}")
        
        # Read setup.py
        with open('setup.py', 'r') as f:
            content = f.read()
        
        # Find and replace each Python classifier line
        lines = content.split('\n')
        version_index = 0
        
        for i, line in enumerate(lines):
            if '"Programming Language :: Python :: 3.' in line and version_index < len(target_versions):
                # Replace the version number in this line
                import re
                new_line = re.sub(r'3\.\d+', target_versions[version_index], line)
                lines[i] = new_line
                version_index += 1
        
        # Write back to setup.py
        with open('setup.py', 'w') as f:
            f.write('\n'.join(lines))
        
        print(f"Updated setup.py with Python versions: {', '.join(target_versions)}")
        
        # Verify the changes
        with open('setup.py', 'r') as f:
            for line_num, line in enumerate(f, 1):
                if '"Programming Language :: Python :: 3.' in line:
                    print(f"Line {line_num}: {line.strip()}")
        EOF

  # Job 3: Code quality checks (linting and formatting)
  code-quality:
    runs-on: ubuntu-latest
    needs: generate-matrix
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Show Python versions from generate-matrix
      run: |
        echo "PYTHON_VERSIONS from generate-matrix: $PYTHON_VERSIONS"
      env:
        PYTHON_VERSIONS: ${{ needs.generate-matrix.outputs.python-versions }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}
    
    - name: Install system dependencies for ta-lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git
        git clone https://github.com/ta-lib/ta-lib.git
        cd ta-lib
        if [ ! -f configure ]; then
          chmod +x autogen.sh
          ./autogen.sh
        fi
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig

    - name: Install dependencies and quality tools
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas
        pip install -r requirements.txt
        pip install TA-Lib
        pip install flake8 black
        pip install -e .
    
    - name: Run flake8 linting
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 pandas_ta_classic --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings for non-critical issues
        flake8 pandas_ta_classic --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=pandas_ta_classic/__init__.py
    
    - name: Check code formatting with black
      run: |
        black --check --diff pandas_ta_classic/

  # Job 4: Test matrix - Run tests on all dynamically generated Python versions
  test-matrix:
    runs-on: ubuntu-latest
    needs: [code-quality, generate-matrix]
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.generate-matrix.outputs.python-versions) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Show Python versions from generate-matrix
      run: |
        echo "PYTHON_VERSIONS from generate-matrix: $PYTHON_VERSIONS"
        echo "Current matrix Python version: ${{ matrix.python-version }}"
      env:
        PYTHON_VERSIONS: ${{ needs.generate-matrix.outputs.python-versions }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies for ta-lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git
        git clone https://github.com/ta-lib/ta-lib.git
        cd ta-lib
        if [ ! -f configure ]; then
          chmod +x autogen.sh
          ./autogen.sh
        fi
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas
        pip install -r requirements.txt
        pip install TA-Lib
        pip install -e .
    
    - name: Run comprehensive tests
      run: |
        python -m unittest discover tests/ -v
    
    - name: Test package installation and performance
      run: |
        python -c "import pandas_ta_classic as ta; print('Package imported successfully on Python ${{ matrix.python-version }}')"
        python -m unittest tests.test_indicator_performance -v

  # Job 5: Documentation - Build and deploy documentation (only on main branch)
  documentation:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}

    - name: Install system dependencies for ta-lib
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git
        git clone https://github.com/ta-lib/ta-lib.git
        cd ta-lib
        if [ ! -f configure ]; then
          chmod +x autogen.sh
          ./autogen.sh
        fi
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas
        pip install -r requirements.txt
        pip install TA-Lib
        pip install -e .
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Build with Jekyll
      uses: actions/jekyll-build-pages@v1
      with:
        source: ./
        destination: ./_site
      
    - name: Debug Jekyll build output
      run: |
        echo "Jekyll build completed. Checking _site directory:"
        ls -la ./_site/ || echo "No _site directory found"
        if [ -d "./_site" ]; then
          echo "Files in _site:"
          find ./_site -type f | head -10
        fi
        
    - name: Upload Jekyll artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site
    
    - name: Install Sphinx dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
          
    - name: Build Sphinx documentation
      run: |
        cd docs
        make html
          
    - name: Upload Sphinx artifact
      uses: actions/upload-artifact@v4
      with:
        name: sphinx-docs
        path: docs/_build/html

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Output deployment URL
      run: |
        echo "Deployment completed successfully"
        echo "Page URL: ${{ steps.deployment.outputs.page_url }}"

  # Job 6: PyPI Publishing - Build and publish to PyPI (only on releases)
  pypi-publish:
    runs-on: ubuntu-latest
    needs: [generate-matrix, test-matrix, documentation]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Show Python versions from generate-matrix
      run: |
        echo "PYTHON_VERSIONS from generate-matrix: $PYTHON_VERSIONS"
      env:
        PYTHON_VERSIONS: ${{ needs.generate-matrix.outputs.python-versions }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.LATEST_PYTHON_VERSION }}
    
    - name: Validate package structure
      run: |
        python validate_structure.py
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
